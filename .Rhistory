c(0.94, 1.07, 12.96),
c(0.96, 0.9, 15.2)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(cobb_douglas_three_good_umax(
1,
a[1],
a[2],
a[3],
scenario[1],
scenario[2],
scenario[3],
scenario[4]
))
}
source("Utility Maximization.R")
scenarios = list(
c(0.84, 1, 15.68),
c(0.99, 0.89, 18.56),
c(0.94, 1.07, 12.96),
c(0.96, 0.9, 15.2)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(cobb_douglas_three_good_umax(
1,
a[1],
a[2],
a[3],
scenario[1],
scenario[2],
scenario[3],
scenario[4]
))
}
source("Utility Maximization.R")
scenarios = list(
c(0.84, 1, 15.68),
c(0.99, 0.89, 18.56),
c(0.94, 1.07, 12.96),
c(0.96, 0.9, 15.2)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(cobb_douglas_three_good_umax(
1,
a[1],
a[2],
a[3],
scenario[1],
scenario[2],
scenario[3],
scenario[4]
))
}
x = c(8, 8)
w = c(1, 1)
a = x*w / sum(x*w)
a
source("Utility Maximization.R")
scenarios = list(
c(0.84, 1, 15.68),
c(0.99, 0.89, 18.56),
c(0.94, 1.07, 12.96),
c(0.96, 0.9, 15.2)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(cobb_douglas_three_good_umax(
1,
a[1],
a[2],
a[3],
scenario[1],
scenario[2],
scenario[3],
scenario[4]
))
}
source("Utility Maximization.R")
scenarios = list(
c(0.84, 1, 15.68),
c(0.99, 0.89, 18.56),
c(0.94, 1.07, 12.96),
c(0.96, 0.9, 15.2)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(cobb_douglas_two_good_umax(
1,
a[1],
a[2],
scenario[1],
scenario[2],
scenario[3]
))
}
x = c(19, 9, 7)
w = c(1, 1, 1)
a = x*w / sum(x*w)
a
source("Utility Maximization.R")
scenarios = list(
c(1, 0.86, 1.16, 36.05),
c(1.18, 0.81, 0.83, 31.15),
c(1.02, 1.03, 0.96, 30.1),
c(1.2, 0.82, 0.95, 37.45)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(cobb_douglas_three_good_umax(
1,
a[1],
a[2],
a[3]
scenario[1],
source("Utility Maximization.R")
scenarios = list(
c(1, 0.86, 1.16, 36.05),
c(1.18, 0.81, 0.83, 31.15),
c(1.02, 1.03, 0.96, 30.1),
c(1.2, 0.82, 0.95, 37.45)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(cobb_douglas_three_good_umax(
1,
a[1],
a[2],
a[3],
scenario[1],
scenario[2],
scenario[3],
scenario[4]
))
}
sigma = 0.7
x = c(15, 16)
w = c( 1, 1)
x_sigma = x^(1/sigma)
a = x_sigma*w / sum(x_sigma*w)
a
scenarios = list(
c(1.2, 1.07, 25.73),
c(1, 0.81, 33.48),
c(1.19, 0.87, 26.97),
c(0.92, 0.81, 35.03)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(ces_two_good_umax(
1,
sigma,
a[1],
a[2],
scenario[1],
scenario[2],
scenario[3]
))
}
sigma = 0.65
x = c(9, 15, 10)
w = c( 1, 1, 1)
x_sigma = x^(1/sigma)
a = x_sigma*w / sum(x_sigma*w)
a
scenarios = list(
c(0.85, 1.16, 0.83, 36.04),
c(1.1, 1.11, 0.96, 36.04),
c(0.91, 1.12, 1.13, 35.7),
c(1.19, 0.97, 0.88, 33.32)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(ces_three_good_umax(
1,
sigma,
a[1],
a[2],
a[3],
scenario[1],
scenario[2],
scenario[3],
scenario[4]
))
}
source("Utility Maximization.R")
df <- read.csv("./Data Files/Quiz01_Q22_m.csv")
mod = lm(log(x1/x2) ~ log(w1/w2), data = df)
plot(log(df$w1/df$w2), log(df$x1/df$x2)) + abline(mod)
df <- read.csv("./Data Files/Quiz01_Q22_m.csv")
mod = lm(log(x1/x2) ~ log(w1/w2), data = df)
mod = lm(log(x1/x2) ~ log(w1/w2), data = df)
```{r}
plot(log(df$w1/df$w2), log(df$x1/df$x2)) + abline(mod)
```{r}
sigma
sigma
sigma
sigma
x = c(18, 20)
w = c(1, 1)
x_sigma = x^(1/sigma)
a = x_sigma*w / sum(x_sigma*w)
a
scenarios = list(
c(1.19, 1.15, 34.2),
c(1.07, 0.81, 33.82),
c(1.05, 0.97, 42.56),
c(1.17, 1.03, 33.06)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(ces_two_good_umax(
1,
sigma,
a[1],
a[2],
scenario[1],
scenario[2],
scenario[3]
))
}
source("Utility Maximization.R")
df <- read.csv("./Data Files/Quiz01_Q22_m.csv")
mod = lm(log(x1/x2) ~ log(w1/w2), data = df)
plot(log(df$w1/df$w2), log(df$x1/df$x2)) + abline(mod)
sigma = round(-mod$coefficients[2], 3)
sigma
x = c(18, 20)
w = c(1, 1)
x_sigma = x^(1/sigma)
a = x_sigma*w / sum(x_sigma*w)
a
scenarios = list(
c(1.19, 1.15, 34.2),
c(1.07, 0.81, 33.82),
c(1.05, 0.97, 42.56),
c(1.17, 1.03, 33.06)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(ces_two_good_umax(
1,
sigma,
a[1],
a[2],
scenario[1],
scenario[2],
scenario[3]
))
}
library(glue)
df <- read.csv("./Data Files/Quiz01_Q23_m.csv") # Step 1 - Edit the file path
# Run this entire cell without editing
opts = list(
c("x1", "w1"),
c("x2", "w2"),
c("x3", "w3")
)
for (i in 1:3) {
opt_a = opts[[i]]
opts_iter = opts[-i]
opt_b = opts_iter[[1]]
opt_c = opts_iter[[2]]
print(glue("Calibration holding {opt_a[1]} and {opt_a[2]}"))
iter_df <- data.frame(
rep(df[[opt_a[1]]], 2),
rep(df[[opt_a[2]]], 2),
c(df[[opt_b[1]]], df[[opt_c[1]]]),
c(df[[opt_b[2]]], df[[opt_c[2]]]),
c(rep(0, nrow(df)), rep(1, nrow(df)))
)
names(iter_df) = c(opt_a, "xn", "wn", "dummy")
mod = lm(log(eval(parse(text = opt_a[1]))/xn) ~ log(eval(parse(text = opt_a[2]))/wn) + dummy, data = iter_df)
sigma = round(-mod$coefficients[2], 3)
print(glue("sigma_{i} = {sigma}"))
print(glue("standard error = {summary(mod)$coefficients[2, 2]}"))
}
sigma = 0.841 # Pick the sigma with the smallest standard error
x = c(8, 13, 17) # Step 3 - Edit these two things as usual
w = c(1, 1, 1)
x_sigma = x^(1/sigma)
a = x_sigma*w / sum(x_sigma*w)
a
sigma = 1.566 # Pick the sigma with the smallest standard error
x = c(14, 18, 19) # Step 3 - Edit these two things as usual
w = c(1, 1, 1)
x_sigma = x^(1/sigma)
a = x_sigma*w / sum(x_sigma*w)
a
# Step 4 - Edit the scenarios
scenarios = list(
c(0.84, 0.92, 0.81, 50.49),
c(0.82, 1.16, 1.09, 57.63),
c(0.97, 0.98, 0.91, 44.88),
c(1.1, 1.02, 1, 58.65)
)#w1, w2, w3, M
for (scenario in scenarios){
print("New Scenario")
print(ces_three_good_umax(
1,
sigma,
a[1],
a[2],
a[3],
scenario[1],
scenario[2],
scenario[3],
scenario[4]
))
}
df = read.csv("./Data Files/Quiz01_Q24_m.csv")
df$chosen = (df$ChosenAlternative == df$Alternative)
View(df)
library(mlogit)
library(glue)
df = read.csv("./Data Files/Quiz01_Q25_m.csv")
df$chosen = (df$ChosenAlternative == df$Alternative)
df$choiceID = (df$ID - 1)*5 + df$ChoiceSet
library(mlogit)
library(glue)
df = read.csv("./Data Files/Quiz01_Q25_m.csv")
df$chosen = (df$ChosenAlternative == df$Alternative)
df$choiceID = (df$ID - 1)*5 + df$ChoiceSet
log_data = mlogit.data(df, choice = "chosen", shape = "long", chid.var = "choiceID", alt.var = "Alternative")
mod1 = mlogit(chosen~Weed + Crawl + Fly + Cost| -1, data = log_data)
summary(mod1)
coefs = coef(mod1)
v_cv = vcov(mod1)
coefs
se_wtp <- function(i, wtp) {
return (1/coefs[4] * sqrt(v_cv[i, i] - 2 * wtp * v_cv[i, 4] + wtp^2 * v_cv[4, 4]))
}
for (i in 1:3) {
print(coefs[i])
wtp = coefs[i]/coefs[4]
print(glue("WTP = {wtp}"))
se = se_wtp(i, wtp)
print(glue("SE = {se}"))
}
mod2 = mlogit(chosen ~ Weed + Crawl + Fly + Cost + I(Weed*F) + I(Crawl*F) + I(Fly*F)|-1,data = log_data)
summary(mod2)
library(lmtest)
lrtest(mod2, mod1)
options = list(
c(1, 2, 5),
c(2, 4, 2),
c(3, 5, 5),
c(2, 6, 10)
)
for (option in options){
cobb_douglas_two_good_umax(
A = 1,
a1 = 0.75,
a2 = 0.25,
w1 = option[1]
w2 = option[2]
options = list(
c(1, 2, 5),
c(2, 4, 2),
c(3, 5, 5),
c(2, 6, 10)
)
for (option in options){
cobb_douglas_two_good_umax(
A = 1,
a1 = 0.75,
a2 = 0.25,
w1 = option[1],
w2 = option[2],
M = option[3]
)}
source("Utility Maximization.R")
source("Expenditure Minimization.R")
options = list(
c(1, 2, 5),
c(2, 4, 2),
c(3, 5, 5),
c(2, 6, 10)
)
for (option in options){
cobb_douglas_two_good_umax(
A = 1,
a1 = 0.75,
a2 = 0.25,
w1 = option[1],
w2 = option[2],
M = option[3]
)}
options = list(
c(1, 2, 5),
c(2, 4, 2),
c(3, 5, 5),
c(2, 6, 10)
)
for (option in options){
cobb_douglas_two_good_umax(
A = 1,
a1 = 0.75,
a2 = 0.25,
w1 = option[1],
w2 = option[2],
M = option[3]
)}
x_1
print(cobb_douglas_two_good_umax(
A = 1,
a1 = 0.75,
a2 = 0.25,
w1 = option[1],
w2 = option[2],
M = option[3]
))}
for (option in options){
print(cobb_douglas_two_good_umax(
A = 1,
a1 = 0.75,
a2 = 0.25,
w1 = option[1],
w2 = option[2],
M = option[3]
)
)
}
options = list(
c(1, 2, 5),
c(2, 4, 2),
c(3, 5, 5),
c(2, 6, 10)
)
for (option in options){
print("new scenario")
print(cobb_douglas_two_good_umax(
A = 1,
a1 = 0.75,
a2 = 0.25,
w1 = option[1],
w2 = option[2],
M = option[3]
)
)
}
options = list(
c(1, 2, 3, 5),
c(1, 2, 3, 5),
c(1, 2, 3, 5),
c(1, 2, 3, 5)
)
for (option in options){
print("New Scenario")
print(
cobb_douglas_three_good_umax(
A = 1,
a1=0.75,
a2=0.1,
a3=0.15,
w1=option[1],
w2=option[2],
w3=option[3],
M=option[4],
)
)
}
options = list(
c(1, 2, 3, 5),
c(1, 2, 3, 5),
c(1, 2, 3, 5),
c(1, 2, 3, 5)
)
for (option in options){
print("New Scenario")
print(
cobb_douglas_three_good_umax(
A = 1,
a1=0.75,
a2=0.1,
a3=0.15,
w1=option[1],
w2=option[2],
w3=option[3],
M=option[4]
)
)
}
# Options
#c(w1, w2, M),
#c(2, 4, 2),
#c(3, 5, 5),
#c(2, 6, 10)
options = list(
c(1, 2, 5),
c(2, 4, 2),
c(3, 5, 5),
c(2, 6, 10)
)
for (option in options){
print("New Scenario")
print(
ces_two_good_umax(
A = 1,
sigma = 0.83,
a1 = 0.33,
a2 = 0.67,
w1 = option[1],
w2 = option[2],
M = option[3]
)
)
}
options.append()
